import { FaSearch, FaHome } from "react-icons/fa";
import { useNavigate } from "react-router-dom";
import { Fragment, useState, useRef, useEffect } from "react";
import AlertModal from "./AlertModal";
import ThemeModal from "./ThemeModal";
import AIResponseForm from "./AIResponseForm";

/* This component is has following utilities:
   1) It provides the user with an search box where the user can type a prompt and send it to the backend API for story generation. 
   2) It provides an interactive to-and-fro communication between the user and openAI
*/
function StoryForm() {
    const navigate = useNavigate()
    const [prompt, setPrompt] = useState('') //This state manages the prompt provided by the user
    const [promptTooLongError, setPromptTooLongError] = useState(false)
    const [saveLoading, setSaveLoading] = useState(false) //This state manages the loading spinner present in the save button.
    const [allData, setAllData] = useState([]) //This state contains the story, and the successsive chain stories, generated bt openAI. It also stores the prompt provided by the user
    const [promiseResolved, setPromiseResolved] = useState(true) //When a user sends a request to a backend API, this state is set to false. It is set to true, if the promise is resolved or rejected
    const [alert, setAlert] = useState({
        isAlert: false,
        message: '',
        type: ''
    }) //This state is used to show the AlertModal when an error occurs while sending a request to the server or when a story has been successfully saved
    const [showThemeModal, setShowThemeModal] = useState(false) //This state is used to show or hide ThemeModal component
    const [theme, setTheme] = useState('') //This state is used to store the theme selected by the user
    const [initialMessage, setInitialMessage] = useState(true) //This state is set true when no story has been requested by the user.

    const ref = useRef(null) //This ref is used to point to a div so that our page scrolls to that div.

    //This function is used to remove the AlertModal
    const alertModalRemover = () => {
        setAlert({
            isAlert: false,
            message: '',
            type: ''
        })
    }

    //In this useEffect hook, whenever the dependency changes, our page is scrolled to a ref that we had defined earlier
    useEffect(() => {
        if (allData.length > 0) {
            ref.current.scrollIntoView({
                behavior: "smooth",
                block: "end",
            })
        }
    }, [allData.length])

    // The code inside this useEffect hook is used to show a message to a user if story has yet been reuested by the user
    useEffect(() => {
        if (allData.length === 0) {
            setInitialMessage(true)
        } else {
            setInitialMessage(false)
        }
    }, [allData.length])


    //This function is used to generate a story based on a prompt provided by the user
    const storyGenerator = async () => {
        let url
        let bodyData
        //This if-else block is used to set the url where the request is to be sent and the data to be sent with that request
        if (allData.length > 0) {
            //If one story has already been generated by the openAI, then the subsequent requests are sent to this url
            url = `${process.env.REACT_APP_BACKEND_URL}/story/chain_story`
            bodyData = {
                promptInput: prompt,
                theme,
                summaryOfStory: allData[allData.length - 1].summaryOfStory // The summary of the previously generated story is also sent to the backend API
            }
        } else {
            // This url is used if no story has yet been generated by the openAI
            url = `${process.env.REACT_APP_BACKEND_URL}/story/generate_story`
            bodyData = {
                promptInput: prompt,
                theme
            }
        }
        setInitialMessage(false)
        setShowThemeModal(false)
        setAllData(allData => [...allData, { prompt, response: null }])
        setPromiseResolved(false)
        try {
            const response = await fetch(url, {
                method: 'POST',
                body: JSON.stringify(bodyData),
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            if (!response.ok) {
                throw new Error('Some error occured')
            }
            const data = await response.json()
            if (data.status === 'ok') {
                setPromiseResolved(true)
                setPrompt('')
                setAllData(allData => [...allData.slice(0, -1), {
                    prompt: data.prompt,
                    fullStory: data.fullStory,
                    summaryOfStory: data.summaryOfStory,
                    theme: data.theme
                }])
            } else {
                throw new Error('Some error occured')
            }
        } catch (error) {
            setAllData(allData => [...allData.slice(0, -1)])
            setPromiseResolved(true)
            setAlert({
                isAlert: true,
                message: 'Some error occured. Try again.',
                type: 'warning'
            })
        }
    }

    //This function is used to save a story to the database.
    const saveStory = async () => {
        if (!promiseResolved || saveLoading) {
            return
        }
        let prompt = allData[0].prompt.charAt(0).toUpperCase() + allData[0].prompt.slice(1) //We use the prompt from the first request sent by the user
        let story = allData[allData.length - 1].fullStory //We use the latest story that the openAI has generated for the user
        let theme = allData[allData.length - 1].theme //We use the theme of the latest story that openAI has generated for the user
        setSaveLoading(true)
        try {
            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/story/save_story`, {
                method: 'POST',
                body: JSON.stringify({ prompt, story, theme }),
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            if (!response.ok) {
                throw new Error('Some error occured')
            }
            const data = await response.json()
            if (data.status === 'ok') {
                setSaveLoading(false)
                setAlert({
                    isAlert: true,
                    message: 'Story has been successfully saved.',
                    type: 'success'
                })
            } else {
                throw new Error('Some error occured')
            }
        } catch (error) {
            setSaveLoading(false)
            setAlert({
                isAlert: true,
                message: 'Some error occured. Try again.',
                type: 'warning'
            })
        }
    }

    //This function runs when the user clicks on the search icon
    const searchClick = () => {
        if (!prompt || !promiseResolved || saveLoading) {
            return
        }
        if (prompt.trim().length > 150) {
            return setPromptTooLongError(true)
        }
        setShowThemeModal(true)
    }

    return (
        <Fragment>
            {/*The following code is used to show the AlertModal component */}
            {alert.isAlert && <AlertModal type={alert.type} message={alert.message} alertModalRemover={alertModalRemover} />}

            {/*The following code is used to show the ThemeModal component.User can select a theme for their story from this modal */}
            {showThemeModal && <ThemeModal themeSetter={data => setTheme(data)} showThemeModalSetter={() => setShowThemeModal(false)} theme={theme} storyGenerator={storyGenerator} />}

            <div className={`flex flex-col place-content-center ${alert.isAlert || showThemeModal ? 'blur' : ''}`} onClick={alertModalRemover}>

                {/*The following button is used to navigate the user to the home page */}
                <button type="button" className="z-50 w-fit fixed top-3.5 md:top-16 right-2 md:left-2 bg-blue-500  mt-0 md:mt-2  text-white font-medium p-1 rounded-lg flex flex-row gap-2" onClick={() => navigate('/')}>
                    <FaHome className=" bg-blue-500 fill-white text-2xl -mr-1.5" />
                    <p className=" text-lg">Home</p>
                </button>

                {/*The following div contains the code for the input box in which the user type a prompt */}
                <div className="z-10 fixed  top-14 pb-4 w-full flex flex-col place-items-center">
                    <div className="w-full flex flex-row place-content-center">
                        <input className="w-10/12 sm:w-2/3 md:w-1/2 mt-4 h-14 pl-2 pr-10 border-2 border-gray-300 rounded-xl" type="text" id="prompt" name="prompt" placeholder='Enter story prompt' autoComplete="off" value={prompt} onChange={e => {
                            setPromptTooLongError(false)
                            setPrompt(e.target.value.trimStart())
                        }} />
                        <FaSearch role="searchButton" className=" fill-gray-400 text-4xl h-full mt-4 pl-1 pr-1 pb-2 pt-3 -ml-10 cursor-pointer" onClick={searchClick} />
                    </div>
                    {allData.length === 0 && <div className="pl-1 flex flex-row w-10/12 sm:w-2/3 md:w-1/2 mt-0.5 ">
                        {!promptTooLongError && <><p className="pr-2 font-medium text-gray-700">Hint:</p>
                            <p className="text-gray-500">Once upon a time in a digital world...</p></>}
                        {promptTooLongError && <p className="text-red-500">Warning:  Prompt cannot be longer than 150 characters.</p>}
                    </div>}
                </div>

                {initialMessage && <div className="w-full flex justify-center fixed top-52 ">
                    <p className="ml-4 mr-4 text-center font-medium">Enter a prompt to get exciting stories.</p>
                </div>}

                <div className="w-full mt-36" >

                    {allData && allData.length > 0 && allData.map(item => {
                        // The AIResponseForm component is used to show to-and-fro communication with the openAI when the user requests a story based on a prompt.
                        return <AIResponseForm item={item} key={Math.random()} />
                    })
                    }

                    {/*On every re-evaluation of our component, the web page is scrolled down to the following div */}
                    <div ref={ref} className="h-16" />
                </div>

                {allData && allData.length > 0 && allData[0].fullStory &&
                    //The following div contains the button used to save a story to the database
                    <div className=' fixed bottom-0 w-full pt-2 pb-2 flex justify-center bg-white'>
                        <div className="h-10 bg-blue-500 flex flex-row rounded-lg ">
                            {saveLoading && <div role="status">
                                <svg aria-hidden="true" className="mt-1.5 ml-1 w-7 h-7 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                                    <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                                </svg>
                                <span className="sr-only">Loading...</span>
                            </div>}
                            <button type="button" className="text-white font-medium p-1 " onClick={saveStory}>Save Story </button>
                        </div>
                    </div>}
            </div >
        </Fragment>
    );
}

export default StoryForm;



